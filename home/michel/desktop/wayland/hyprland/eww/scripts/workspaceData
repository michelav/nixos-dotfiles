declare -A icon=(["empty"]="" ["occupied"]="" ["focused"]="")
declare -A workspaces

generate_json() {
  for i in {1..10}; do
    printf '%s\0%s\0' "$i" "${workspaces[$i]:-empty}"
  done |
  jq -cRs '
    split("\u0000")
  | . as $a
  | reduce range(0; length/2) as $k
  # ([]; . + [{($a[2*$k]): ($a[2*$k + 1]|fromjson? // .)}])
  ([]; . + [{id: ($a[2*$k]|fromjson? // .), status: ($a[2*$k + 1]|fromjson? // .)}])'
#  '
}

update_workspaces() {
  workspaces=()
  while read -r k v
    do workspaces[$k]=$v
  done < <(hyprctl -j workspaces | jq -r '.[] | "\(.id) \(.windows | select(.>0) | "occupied" // "empty")"')
  workspaces[$active_ws]="focused"
  generate_json
}

handle() {
  case $1 in
    initialize)
      # echo "Initialization"
      update_workspaces
      ;;
    workspace*)
      active_ws=${1#*>>}
      # echo "Focusing workspace: $active_ws"
      update_workspaces
      ;;
    destroyworkspace*)
      dws=${1#*>>}
      # echo "Destroying workspace: $dws"
      update_workspaces
      ;;
    openwindow* | closewindow* | movewindow*)
      # echo "Updating windows"
      update_workspaces
      ;;
  esac
}

active_ws=$(hyprctl -j activewindow | jq -r .workspace.id)
handle "initialize"
socat -U - UNIX-CONNECT:/tmp/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock | while read -r line; do handle "$line"; done

