diff --git a/background-image.c b/background-image.c
index 9cfe0a1f..9ab84cf1 100644
--- a/background-image.c
+++ b/background-image.c
@@ -318,7 +318,7 @@ cairo_surface_t *load_background_image(const char *path) {
 }
 
 void render_background_image(cairo_t *cairo, cairo_surface_t *image,
-		enum background_mode mode, int buffer_width, int buffer_height) {
+		enum background_mode mode, int buffer_width, int buffer_height, double alpha) {
 	double width = cairo_image_surface_get_width(image);
 	double height = cairo_image_surface_get_height(image);
 
@@ -380,6 +380,6 @@ void render_background_image(cairo_t *cairo, cairo_surface_t *image,
 		assert(0);
 		break;
 	}
-	cairo_paint(cairo);
+	cairo_paint_with_alpha(cairo, alpha);
 	cairo_restore(cairo);
 }
diff --git a/cairo.c b/cairo.c
index 75314bdb..be216da6 100644
--- a/cairo.c
+++ b/cairo.c
@@ -1,4 +1,6 @@
 #include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
 #include <cairo/cairo.h>
 #include "cairo.h"
 #if HAVE_GDK_PIXBUF
@@ -29,6 +31,18 @@ cairo_subpixel_order_t to_cairo_subpixel_order(enum wl_output_subpixel subpixel)
 	return CAIRO_SUBPIXEL_ORDER_DEFAULT;
 }
 
+cairo_surface_t *cairo_surface_duplicate(cairo_surface_t *src) {
+	uint32_t stride = cairo_image_surface_get_stride(src);
+	uint32_t height = cairo_image_surface_get_height(src);
+	uint32_t width = cairo_image_surface_get_width(src);
+	cairo_format_t format = cairo_image_surface_get_format(src);
+
+	void *new_data = malloc(stride * height);
+	memcpy(new_data, cairo_image_surface_get_data(src), stride * height);
+
+	return cairo_image_surface_create_for_data(new_data, format, width, height, stride);
+}
+
 #if HAVE_GDK_PIXBUF
 cairo_surface_t* gdk_cairo_image_surface_create_from_pixbuf(const GdkPixbuf *gdkbuf) {
 	int chan = gdk_pixbuf_get_n_channels(gdkbuf);
diff --git a/fade.c b/fade.c
index 826b9084..2cd3b9ad 100644
--- a/fade.c
+++ b/fade.c
@@ -1,93 +1,8 @@
 #include "fade.h"
-#include "pool-buffer.h"
 #include "swaylock.h"
 #include <stdlib.h>
-#include <stdio.h>
-#include <omp.h>
-#include <stdalign.h>
-#include <string.h>
 
-#ifdef FADE_PROFILE
-#include <time.h>
-double get_time() {
-	struct timespec tv;
-	clock_gettime(CLOCK_MONOTONIC, &tv);
-	return tv.tv_sec + (tv.tv_nsec / 1000000000.0);
-}
-#endif
-
-#if defined(USE_SSE) && defined(__SSE2__)
-#define set_alpha set_alpha_sse
-
-#include <immintrin.h>
-
-static void set_alpha_sse(uint32_t *orig, struct pool_buffer *buf, float alpha) {
-	int alpha_factor = (int)(alpha * (1 << 16));
-	if (alpha_factor != 0)
-		alpha_factor -= 1;
-
-	__m128i alpha_vec = _mm_set_epi16(
-			alpha_factor, alpha_factor, alpha_factor, alpha_factor,
-			alpha_factor, alpha_factor, alpha_factor, alpha_factor);
-	__m128i dummy_vec = _mm_set_epi16(0, 0, 0, 0, 0, 0, 0, 0);
-
-	uint8_t *orig_bytes = (uint8_t *)orig;
-	uint8_t *dest_bytes = (uint8_t *)buf->data;
-	size_t length = ((size_t)buf->width * (size_t)buf->height * 4) / 8;
-
-	for (size_t i = 0; i < length; ++i) {
-		size_t index = i * 8;
-
-		// Read data into SSE register, where each byte is an u16
-		__m128i argb_vec = _mm_loadu_si64(orig_bytes + index);
-		argb_vec = _mm_unpacklo_epi8(argb_vec, dummy_vec);
-
-		// Multiply the 8 argb u16s with the 8 alpha u16s
-		argb_vec = _mm_mulhi_epu16(argb_vec, alpha_vec);
-
-		// Put the low bytes of each argb u16 into the destination buffer
-		argb_vec = _mm_packus_epi16(argb_vec, dummy_vec);
-		_mm_storeu_si64(dest_bytes + index, argb_vec);
-	}
-}
-
-#else
-#define set_alpha set_alpha_slow
-
-static void set_alpha_slow(uint32_t *orig, struct pool_buffer *buf, float alpha) {
-	for (size_t y = 0; y < buf->height; ++y) {
-		for (size_t x = 0; x < buf->width; ++x) {
-			size_t index = y * buf->width + x;
-			uint32_t srcpix = orig[index];
-			int srcr = (srcpix & 0x00ff0000u) >> 16;
-			int srcg = (srcpix & 0x0000ff00u) >> 8;
-			int srcb = (srcpix & 0x000000ffu);
-
-			((uint32_t *)buf->data)[index] = 0 |
-				(uint32_t)(alpha * 255) << 24 |
-				(uint32_t)(srcr * alpha) << 16 |
-				(uint32_t)(srcg * alpha) << 8 |
-				(uint32_t)(srcb * alpha);
-		}
-	}
-}
-
-#endif
-
-void fade_prepare(struct swaylock_fade *fade, struct pool_buffer *buffer) {
-	if (!fade->target_time) {
-		fade->original_buffer = NULL;
-		return;
-	}
-
-	size_t size = (size_t)buffer->width * (size_t)buffer->height * 4;
-	fade->original_buffer = malloc(size);
-	memcpy(fade->original_buffer, buffer->data, size);
-
-	set_alpha(fade->original_buffer, buffer, 0);
-}
-
-void fade_update(struct swaylock_fade *fade, struct pool_buffer *buffer, uint32_t time) {
+void fade_update(struct swaylock_fade *fade, uint32_t time) {
 	if (fade->current_time >= fade->target_time) {
 		return;
 	}
@@ -103,26 +18,9 @@ void fade_update(struct swaylock_fade *fade, struct pool_buffer *buffer, uint32_
 		fade->current_time = fade->target_time;
 	}
 
-	double alpha = (double)fade->current_time / (double)fade->target_time;
-
-#ifdef FADE_PROFILE
-	double before = get_time();
-#endif
-
-	set_alpha(fade->original_buffer, buffer, alpha);
-
-#ifdef FADE_PROFILE
-	double after = get_time();
-	printf("set alpha in %fms (%fFPS). %fms since last time, FPS: %f\n",
-			(after - before) * 1000, 1 / (after - before),
-			delta, 1000 / delta);
-#endif
+	fade->alpha = (double)fade->current_time / (double)fade->target_time;
 }
 
 bool fade_is_complete(struct swaylock_fade *fade) {
 	return fade->target_time == 0 || fade->current_time >= fade->target_time;
 }
-
-void fade_destroy(struct swaylock_fade *fade) {
-	free(fade->original_buffer);
-}
diff --git a/include/background-image.h b/include/background-image.h
index 7dca8c53..ad38272e 100644
--- a/include/background-image.h
+++ b/include/background-image.h
@@ -20,6 +20,6 @@ cairo_surface_t *load_background_image(const char *path);
 cairo_surface_t *load_background_from_buffer(void *buf, uint32_t format,
 		uint32_t width, uint32_t height, uint32_t stride, enum wl_output_transform transform);
 void render_background_image(cairo_t *cairo, cairo_surface_t *image,
-		enum background_mode mode, int buffer_width, int buffer_height);
+		enum background_mode mode, int buffer_width, int buffer_height, double alpha);
 
 #endif
diff --git a/include/cairo.h b/include/cairo.h
index 15664cdf..821e6d42 100644
--- a/include/cairo.h
+++ b/include/cairo.h
@@ -15,6 +15,8 @@ cairo_subpixel_order_t to_cairo_subpixel_order(enum wl_output_subpixel subpixel)
 cairo_surface_t *cairo_image_surface_scale(cairo_surface_t *image,
 		int width, int height);
 
+cairo_surface_t *cairo_surface_duplicate(cairo_surface_t *src);
+
 #if HAVE_GDK_PIXBUF
 
 cairo_surface_t* gdk_cairo_image_surface_create_from_pixbuf(
diff --git a/include/fade.h b/include/fade.h
index 1a4f3108..a97a7758 100644
--- a/include/fade.h
+++ b/include/fade.h
@@ -4,18 +4,14 @@
 #include <stdbool.h>
 #include <stdint.h>
 
-struct pool_buffer;
-
 struct swaylock_fade {
 	float current_time;
 	float target_time;
 	uint32_t old_time;
-	uint32_t *original_buffer;
+	double alpha;
 };
 
-void fade_prepare(struct swaylock_fade *fade, struct pool_buffer *buffer);
-void fade_update(struct swaylock_fade *fade, struct pool_buffer *buffer, uint32_t time);
+void fade_update(struct swaylock_fade *fade, uint32_t time);
 bool fade_is_complete(struct swaylock_fade *fade);
-void fade_destroy(struct swaylock_fade *fade);
 
 #endif
diff --git a/include/swaylock.h b/include/swaylock.h
index 626adeb5..ad259b6b 100644
--- a/include/swaylock.h
+++ b/include/swaylock.h
@@ -121,6 +121,7 @@ struct swaylock_surface {
 		uint32_t format, width, height, stride;
 		enum wl_output_transform transform;
 		void *data;
+		cairo_surface_t *original_image;
 		struct swaylock_image *image;
 	} screencopy;
 	struct swaylock_state *state;
@@ -161,9 +162,8 @@ void swaylock_handle_key(struct swaylock_state *state,
 		xkb_keysym_t keysym, uint32_t codepoint);
 void swaylock_handle_mouse(struct swaylock_state *state);
 void swaylock_handle_touch(struct swaylock_state *state);
-void render_frame_background(struct swaylock_surface *surface);
+void render_frame_background(struct swaylock_surface *surface, bool commit);
 void render_background_fade(struct swaylock_surface *surface, uint32_t time);
-void render_background_fade_prepare(struct swaylock_surface *surface, struct pool_buffer *buffer);
 void render_frame(struct swaylock_surface *surface);
 void render_frames(struct swaylock_state *state);
 void damage_surface(struct swaylock_surface *surface);
diff --git a/main.c b/main.c
index 96bee7f3..a361c16e 100644
--- a/main.c
+++ b/main.c
@@ -257,7 +257,6 @@ static void destroy_surface(struct swaylock_surface *surface) {
 	destroy_buffer(&surface->buffers[1]);
 	destroy_buffer(&surface->indicator_buffers[0]);
 	destroy_buffer(&surface->indicator_buffers[1]);
-	fade_destroy(&surface->fade);
 	wl_output_destroy(surface->output);
 	free(surface);
 }
@@ -289,19 +288,6 @@ static void create_surface(struct swaylock_surface *surface) {
 
 	surface->image = select_image(state, surface);
 
-	static bool has_printed_zxdg_error = false;
-	if (state->zxdg_output_manager) {
-		surface->xdg_output = zxdg_output_manager_v1_get_xdg_output(
-				state->zxdg_output_manager, surface->output);
-		zxdg_output_v1_add_listener(
-				surface->xdg_output, &_xdg_output_listener, surface);
-		surface->events_pending += 1;
-	} else if (!has_printed_zxdg_error) {
-		swaylock_log(LOG_INFO, "Compositor does not support zxdg output "
-				"manager, images assigned to named outputs will not work");
-		has_printed_zxdg_error = true;
-	}
-
 	surface->surface = wl_compositor_create_surface(state->compositor);
 	assert(surface->surface);
 
@@ -352,9 +338,10 @@ static void initially_render_surface(struct swaylock_surface *surface) {
 		wl_region_destroy(region);
 	}
 
-	render_frame_background(surface);
-	render_background_fade_prepare(surface, surface->current_buffer);
-	render_frame(surface);
+	if (!surface->state->ext_session_lock_v1) {
+		render_frame_background(surface, true);
+		render_frame(surface);
+	}
 }
 
 static void layer_surface_configure(void *data,
@@ -394,8 +381,12 @@ static void ext_session_lock_surface_v1_handle_configure(void *data,
 	surface->height = height;
 	surface->indicator_width = 0;
 	surface->indicator_height = 0;
+	// Render before we send the ACK event, so that we minimize flickering
+	// This means we cannot commit immediately after rendering -- we will have
+	// to send the ACK first and then commit.
+	render_frame_background(surface, false);
 	ext_session_lock_surface_v1_ack_configure(lock_surface, serial);
-	render_frame_background(surface);
+	wl_surface_commit(surface->surface);
 	render_frame(surface);
 }
 
@@ -641,17 +632,18 @@ static void handle_screencopy_frame_ready(void *data,
 			surface->screencopy.transform);
 	if (image == NULL) {
 		swaylock_log(LOG_ERROR, "Failed to create image from screenshot");
+		state->args.screenshots = false;
+		state->args.fade_in = 0; // Fade in is not possible without screenshot
 	} else  {
-		surface->screencopy.image->cairo_surface =
-			apply_effects(image, state, surface->scale);
-		surface->image = surface->screencopy.image->cairo_surface;
+		surface->screencopy.original_image = cairo_surface_duplicate(image);
+		surface->screencopy.image->cairo_surface = image;
+		if (state->args.screenshots) {
+			swaylock_log(LOG_DEBUG, "Loaded screenshot for output %s", surface->output_name);
+			wl_list_insert(&state->images, &surface->screencopy.image->link);
+		}
 	}
 
-	swaylock_log(LOG_DEBUG, "Loaded screenshot for output %s", surface->output_name);
-	wl_list_insert(&state->images, &surface->screencopy.image->link);
-	if (--surface->events_pending == 0) {
-		initially_render_surface(surface);
-	}
+	--surface->events_pending;
 }
 
 static void handle_screencopy_frame_failed(void *data,
@@ -659,10 +651,10 @@ static void handle_screencopy_frame_failed(void *data,
 	swaylock_trace();
 	struct swaylock_surface *surface = data;
 	swaylock_log(LOG_ERROR, "Screencopy failed");
+	surface->state->args.screenshots = false;
+	surface->state->args.fade_in = 0; // Fade in is not possible without screenshot
 
-	if (--surface->events_pending == 0) {
-		initially_render_surface(surface);
-	}
+	--surface->events_pending;
 }
 
 static const struct zwlr_screencopy_frame_v1_listener screencopy_frame_listener = {
@@ -700,33 +692,23 @@ static void handle_xdg_output_done(void *data, struct zxdg_output_v1 *output) {
 	swaylock_trace();
 	struct swaylock_surface *surface = data;
 	struct swaylock_state *state = surface->state;
-	cairo_surface_t *new_image = select_image(surface->state, surface);
-
-	if (new_image == surface->image && state->args.screenshots) {
-		static bool has_printed_screencopy_error = false;
-		if (state->screencopy_manager) {
-			surface->screencopy_frame = zwlr_screencopy_manager_v1_capture_output(
-					state->screencopy_manager, false, surface->output);
-			zwlr_screencopy_frame_v1_add_listener(surface->screencopy_frame,
-					&screencopy_frame_listener, surface);
-			surface->events_pending += 1;
-		} else if (!has_printed_screencopy_error) {
-			swaylock_log(LOG_INFO, "Compositor does not support screencopy manager, "
-					"screenshots will not work");
-			has_printed_screencopy_error = true;
-		}
-	} else if (new_image != NULL) {
-		if (state->args.screenshots) {
-			swaylock_log(LOG_DEBUG,
-					"Using existing image instead of taking a screenshot for output %s.",
-					surface->output_name);
-		}
-		surface->image = new_image;
-	}
 
-	if (--surface->events_pending == 0) {
-		initially_render_surface(surface);
+	static bool has_printed_screencopy_error = false;
+	if (state->screencopy_manager) {
+		surface->screencopy_frame = zwlr_screencopy_manager_v1_capture_output(
+				state->screencopy_manager, false, surface->output);
+		zwlr_screencopy_frame_v1_add_listener(surface->screencopy_frame,
+				&screencopy_frame_listener, surface);
+		surface->events_pending += 1;
+	} else if (!has_printed_screencopy_error) {
+		swaylock_log(LOG_INFO, "Compositor does not support screencopy manager, "
+				"screenshots / fade-in will not work");
+		state->args.screenshots = false;
+		state->args.fade_in = 0; // Fade in is not possible without screenshot
+		has_printed_screencopy_error = true;
 	}
+
+	--surface->events_pending;
 }
 
 struct zxdg_output_v1_listener _xdg_output_listener = {
@@ -1885,6 +1867,46 @@ int main(int argc, char **argv) {
 		return 1;
 	}
 
+	struct swaylock_surface *surface;
+	if (state.zxdg_output_manager) {
+		// Enumerate all outputs first so that screenshots can be obtained
+		// before ext_session_lock_manager_v1_lock(). After the screen is locked,
+		// no screenshot can be retrieved because normal rendering is blocked.
+		wl_list_for_each(surface, &state.surfaces, link) {
+			surface->xdg_output = zxdg_output_manager_v1_get_xdg_output(
+					state.zxdg_output_manager, surface->output);
+			zxdg_output_v1_add_listener(
+					surface->xdg_output, &_xdg_output_listener, surface);
+			surface->events_pending += 1;
+		};
+
+		wl_list_for_each(surface, &state.surfaces, link) {
+			while (surface->events_pending > 0) {
+				wl_display_roundtrip(state.display);
+			}
+		}
+	} else {
+		swaylock_log(LOG_INFO, "Compositor does not support zxdg output "
+				"manager, images assigned to named outputs will not work");
+		state.args.screenshots = false;
+		state.args.fade_in = 0; // Fade in is not possible without screenshot
+	}
+
+	// Must daemonize before we run any effects, since effects use openmp
+	int daemonfd;
+	if (state.args.daemonize) {
+		wl_display_roundtrip(state.display);
+		daemonfd = daemonize_start();
+	}
+
+	// Need to apply effects to all images *before* requesting ext_session_lock_v1
+	// Otherwise, the screen would be blank while the effects are being applied.
+	struct swaylock_image *iter_image, *temp;
+	wl_list_for_each_safe(iter_image, temp, &state.images, link) {
+		iter_image->cairo_surface = apply_effects(
+				iter_image->cairo_surface, &state, 1);
+	}
+
 	if (state.ext_session_lock_manager_v1) {
 		swaylock_log(LOG_DEBUG, "Using ext-session-lock-v1");
 		state.ext_session_lock_v1 = ext_session_lock_manager_v1_lock(state.ext_session_lock_manager_v1);
@@ -1909,21 +1931,6 @@ int main(int argc, char **argv) {
 		return 1;
 	}
 
-	// Must daemonize before we run any effects, since effects use openmp
-	int daemonfd;
-	if (state.args.daemonize) {
-		wl_display_roundtrip(state.display);
-		daemonfd = daemonize_start();
-	}
-
-	// Need to apply effects to all images loaded with --image
-	struct swaylock_image *iter_image, *temp;
-	wl_list_for_each_safe(iter_image, temp, &state.images, link) {
-		iter_image->cairo_surface = apply_effects(
-				iter_image->cairo_surface, &state, 1);
-	}
-
-	struct swaylock_surface *surface;
 	wl_list_for_each(surface, &state.surfaces, link) {
 		create_surface(surface);
 	}
diff --git a/render.c b/render.c
index ebf8bfb7..655c5b19 100644
--- a/render.c
+++ b/render.c
@@ -63,7 +63,7 @@ static void timetext(struct swaylock_surface *surface, char **tstr, char **dstr)
 	setlocale(LC_TIME, prevloc);
 }
 
-void render_frame_background(struct swaylock_surface *surface) {
+void render_frame_background(struct swaylock_surface *surface, bool commit) {
 	struct swaylock_state *state = surface->state;
 
 	int buffer_width = surface->width * surface->scale;
@@ -87,8 +87,15 @@ void render_frame_background(struct swaylock_surface *surface) {
 	cairo_paint(cairo);
 	if (surface->image && state->args.mode != BACKGROUND_MODE_SOLID_COLOR) {
 		cairo_set_operator(cairo, CAIRO_OPERATOR_OVER);
-		render_background_image(cairo, surface->image,
-			state->args.mode, buffer_width, buffer_height);
+		if (fade_is_complete(&surface->fade)) {
+			render_background_image(cairo, surface->image,
+				state->args.mode, buffer_width, buffer_height, 1);
+		} else {
+			render_background_image(cairo, surface->screencopy.original_image,
+				state->args.mode, buffer_width, buffer_height, 1);
+			render_background_image(cairo, surface->image,
+				state->args.mode, buffer_width, buffer_height, surface->fade.alpha);
+		}
 	}
 	cairo_restore(cairo);
 	cairo_identity_matrix(cairo);
@@ -96,47 +103,20 @@ void render_frame_background(struct swaylock_surface *surface) {
 	wl_surface_set_buffer_scale(surface->surface, surface->scale);
 	wl_surface_attach(surface->surface, surface->current_buffer->buffer, 0, 0);
 	wl_surface_damage_buffer(surface->surface, 0, 0, INT32_MAX, INT32_MAX);
-	wl_surface_commit(surface->surface);
-}
-
-void render_background_fade(struct swaylock_surface *surface, uint32_t time) {
-	struct swaylock_state *state = surface->state;
-
-	int buffer_width = surface->width * surface->scale;
-	int buffer_height = surface->height * surface->scale;
-	if (buffer_width == 0 || buffer_height == 0) {
-		return; // not yet configured
-	}
-
-	if (fade_is_complete(&surface->fade)) {
-		return;
+	if (commit) {
+		wl_surface_commit(surface->surface);
 	}
-
-	surface->current_buffer = get_next_buffer(state->shm,
-			surface->buffers, buffer_width, buffer_height);
-	if (surface->current_buffer == NULL) {
-		return;
-	}
-
-	fade_update(&surface->fade, surface->current_buffer, time);
-
-	wl_surface_set_buffer_scale(surface->surface, surface->scale);
-	wl_surface_attach(surface->surface, surface->current_buffer->buffer, 0, 0);
-	wl_surface_damage(surface->surface, 0, 0, surface->width, surface->height);
-	wl_surface_commit(surface->surface);
 }
 
-void render_background_fade_prepare(struct swaylock_surface *surface, struct pool_buffer *buffer) {
+void render_background_fade(struct swaylock_surface *surface, uint32_t time) {
 	if (fade_is_complete(&surface->fade)) {
 		return;
 	}
 
-	fade_prepare(&surface->fade, buffer);
+	fade_update(&surface->fade, time);
 
-	wl_surface_set_buffer_scale(surface->surface, surface->scale);
-	wl_surface_attach(surface->surface, surface->current_buffer->buffer, 0, 0);
-	wl_surface_damage(surface->surface, 0, 0, surface->width, surface->height);
-	wl_surface_commit(surface->surface);
+	render_frame_background(surface, true);
+	render_frame(surface);
 }
 
 void render_frame(struct swaylock_surface *surface) {
